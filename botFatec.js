const env = require('../.env')
const Telegraf = require('telegraf') 
const Extra = require('telegraf/extra')
const Markup = require('telegraf/markup')
const bot = new Telegraf(env.token)
const Stage = require('telegraf/stage')
const WizardScene = require('telegraf/scenes/wizard')
const Composer = require('telegraf/composer')
const session = require('telegraf/session')

bot.start (async (ctx,next) => {
    const from = ctx.update.message.from
    console.log(from)
    await ctx.replyWithPhoto({source: `${__dirname}/doeSangue.jpg`})
    await ctx.reply(`OlÃ¡ ${from.first_name} aqui quem fala Ã©  o BLOOD ğŸ˜Š do banco de sangue.E estou aqui pra te falar sobre um assunto realmente importante.`)
    await ctx.reply(`${from.first_name}, com uma doaÃ§Ã£o a cada trÃªs meses vocÃª pode ajudar atÃ© 12 pessoas e suas famÃ­lias!`)
    await ctx.reply(`Doar sangue Ã© um ato altruÃ­sta e totalmente  voluntÃ¡rio.`)
    await ctx.reply(`Se me permite, posso responder algumas dÃºvidas frequentes e importantes sobre esse assunto:`, botoes,botoesAgenda)
    next()
})

const botoes = Extra.markup(Markup.inlineKeyboard([ 
   
    Markup.callbackButton('DoenÃ§as que impedem a doaÃ§Ã£o de sangue:', 'Q1'), 
    Markup.callbackButton('Quem pode doar?', 'Q2'),
    Markup.callbackButton('Preciso estar em jejum?', 'Q3'),
    Markup.callbackButton('Quanto sangue Ã© retirado?', 'Q4'),
    Markup.callbackButton('Meu corpo nÃ£o vai sentir falta desse sangue?', 'Q5'),
    Markup.callbackButton('Quanto tempo leva para o organismo repor o sangue doado?', 'Q6'),
    Markup.callbackButton('Quanto tempo demora?', 'Q7'),
    Markup.callbackButton('Quantas vezes no ano posso doar?', 'Q8'),
    Markup.callbackButton('Quem doa sangue tem atestado mÃ©dico?', 'Q9'),
    Markup.callbackButton('Doar sangue engrossa ou afina o sangue?', 'Q10'),
    Markup.callbackButton('Quem tem tatuagem pode doar sangue?', 'Q11'),
   
], { columns: 1 }))

  
bot.action('Q1',async ctx => {
    
    await ctx.reply(`DoenÃ§as infecciosas, como a gripe, e inflamatÃ³rias, como aquelas que atacam o intestino, exigem que a doaÃ§Ã£o seja postergada para outra data.`, botoes,botoesAgenda)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})


bot.action('Q2',async ctx => {
    
    await ctx.reply(`Qualquer pessoa com idade entre 18 e 67 anos que pese mais de 50 quilos. Jovens de 16 ou 17 anos tambÃ©m estÃ£o aptos, desde que tenham o consentimento dos pais ou dos responsÃ¡veis.`, botoes)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})


bot.action('Q3',async ctx => {
    
    await ctx.reply(`O doador nÃ£o deve estar em jejum de nenhuma forma, pelo contrÃ¡rio, deve estar alimentado e descansado, evitando alimentaÃ§Ã£o gordurosa nas 3 horas que antecedem a doaÃ§Ã£o.`, botoes)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})

bot.action('Q4',async ctx => {
    
    await ctx.reply(`SÃ£o 450 mililitros. Esse volume pode salvar a vida de atÃ© quatro pessoas.`, botoes)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})

bot.action('Q5',async  ctx => {
    
    await ctx.reply(`NÃ£o.O volume coletado nÃ£o ultrapassa 10-15% da quantidade de sangue que o doador possui.NÃ³s possuÃ­mos cerca de 5 litros do lÃ­quido vermelho circulando pelos vasos. A retirada nÃ£o prejudica em nada. O organismo repÃµe e alcanÃ§a os nÃ­veis normais em atÃ© 72 horas`, botoes)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})

bot.action('Q6',async ctx => {
    
    await ctx.reply(`O organismo repÃµe o volume de sangue doado nas primeiras 24 horas apÃ³s a doaÃ§Ã£o.`, botoes)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})

bot.action('Q7', async ctx => {
    
    await ctx.reply(`A coleta do sangue Ã© bem rÃ¡pida: leva de 8 a 12 minutos. Antes, o doador faz uma triagem e passa algumas informaÃ§Ãµes de saÃºde para os funcionÃ¡rios do local.`, botoes)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})

bot.action('Q8', async ctx => {
    
    await ctx.reply(`Homens podem doar sangue atÃ© quatro vezes por ano, com intervalo de 60 dias entre cada doaÃ§Ã£o. JÃ¡ as mulheres podem doar trÃªs vezes ao ano, com intervalo de 90 dias.`, botoes)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})

bot.action('Q9', async ctx => {
    
    await ctx.reply(`O inciso IV do artigo 473 da CLT (ConsolidaÃ§Ã£o das Leis do Trabalho) dispÃµe que o empregado poderÃ¡ deixar de comparecer ao serviÃ§o, sem prejuÃ­zo do salÃ¡rio, por um dia, a cada 12 meses, em caso de doaÃ§Ã£o voluntÃ¡ria de sangue devidamente comprovada.`, botoes)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})

bot.action('Q10',async ctx => {
    
    await ctx.reply(`NÃ£o engrossa nem afina o sangue. Isso Ã© um mito.`, botoes)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
})

bot.action('Q11',async ctx => {
    
    await ctx.reply(`Sim, desde que tenha feito a tatuagem hÃ¡ mais de um ano.`, botoes,)
    await ctx.reply(`EntÃ£o ${ctx.from.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda)
    
})


let data = null
//botes**************************************************************************************
const botoesAgenda = Extra.markup(Markup.inlineKeyboard([ 
    Markup.callbackButton('SIM ğŸ’™ eu quero salvar vidas!', 'S'), 
    Markup.callbackButton('NÃ‚O, talvez em uma prÃ³xima oportunidade.', 'N'),
   
], { columns: 1 }))

const botoesConfirmacao = Extra.markup(Markup.inlineKeyboard([
    Markup.callbackButton('Sim', 'C'),
    Markup.callbackButton('NÃ£o', 'D'),
]))

//botÃ£o recomendaÃ§Ãµes
const botaoRecomendacoes = Extra.markup(Markup.inlineKeyboard([
    Markup.callbackButton('RecomendaÃ§Ãµes/n Para o dia da doaÃ§Ã£o', 'R'),
]))

//action recomendaÃ§Ãµes
bot.action('R',async ctx => {
    
    await ctx.reply(`
.Ã‰ obrigatÃ³rio apresentar documento oficial com foto, preferencialmente o R.G.
.Dormir bem, pelo menos 6 horas antes da doaÃ§Ã£o;
.Evitar o jejum. Fazer refeiÃ§Ãµes leves e nÃ£o gordurosas. Em refeiÃ§Ãµes fartas, como o almoÃ§o e jantar, sÃ³ doar apÃ³s 03 horas.
.Evitar uso de bebidas alcoÃ³licas nas Ãºltimas 12 horas;
.Ingerir bastante Ã¡gua antes e depois da doaÃ§Ã£o;
.NÃ£o fumar por no mÃ­nimo uma hora antes e uma hora apÃ³s a doaÃ§Ã£o;
.NÃ£o praticar exercÃ­cios fÃ­sicos exagerados e atividades perigosas, como subir em locais altos ou dirigir veÃ­culos em rodovias, etc.
.Permanecer no serviÃ§o hemoterÃ¡pico apÃ³s a doaÃ§Ã£o por 15 minutos.
.NÃ£o forÃ§ar o braÃ§o em que foi realizada a punÃ§Ã£o no dia da doaÃ§Ã£o, para evitar sangramentos e hematomas.`)
})

//composers **********************************************************************************

//handlers para confirmar doaÃ§Ãµes
const doaHandler = new Composer()
    doaHandler.action('N',  async ctx => {
        await ctx.reply(`Tudo bem ${ctx.from.first_name}, esperamos contar com vocÃª em um futuro prÃ³ximo.ğŸ˜Š`)
        await ctx.reply(`Se preferir vocÃª tambÃ©m pode tirar mais dÃºvidas no link abaixo ou agendar pelo telefone: (12)3519-3766 `)
        await ctx.replyWithHTML(`<a href="https://salvovidas.com">Salvo Vidas</a> `)
        await ctx.scene.leave()

    })
    
    doaHandler.action('S', async ctx => {
        await ctx.reply(`Ã“timo, entÃ£o vamos agendar uma doaÃ§Ã£o.`)
        await ctx.reply(`Lembrando o nosso horÃ¡rio de funcionamento: segunda a sexta-feira: 07h00 Ã s 12h30.`)
        await ctx.reply(`Entre com uma data no formato dd/MM/YYYY`)
        await ctx.wizard.next()
    
    })
doaHandler.use(ctx => ctx.reply(`EntÃ£o ${ctx.update.message.first_name}, vamos agendar uma doaÃ§Ã£o?`,botoesAgenda))


//handlers para preencher e confirmar data.
const dataHandler = new Composer()
dataHandler.hears(/(\d{2}\/\d{2}\/\d{4})/, ctx => {
    data = ctx.match[1]
    ctx.reply(`Data:
        ğŸ“† ${data}
        Confirma?`, botoesConfirmacao)
    ctx.wizard.next()
})
dataHandler.use(ctx => ctx.reply('Entre com uma data no formato dd/MM/YYYY'))


//Em caso positivo handler para confirmar e agradecer
const confirmacaoHandler = new Composer()
confirmacaoHandler.action('C', async ctx => {
    await ctx.reply('âœ” A sua doaÃ§Ã£o estÃ¡ agendada!', botaoRecomendacoes)
    //await ctx.reply(botaoRecomendacoes)
    await ctx.reply('HÃ¡, antes que eu me esqueÃ§a aqui esta a localizaÃ§Ã£o do nosso Hemocentro')
    await ctx.replyWithLocation(-23.186712, -45.881703)
    await ctx.reply(`Nosso Hemocentro agradece e ansiosamente te aguarda, para maiores informaÃ§Ãµes tambÃ©m estamos disponÃ­veis no telefone: (12)3519-3766 ğŸ˜Š `)
    await ctx.scene.leave()
})

//Em caso negativo handler para excluir ou reagendar outa data.
confirmacaoHandler.action('D', async ctx => {
    await ctx.reply('DoaÃ§Ã£o excluÃ­da!')
    await ctx.reply('Gostaria de reagendar uma data?',botoesAgenda)
    ctx.scene.leave()
        
    })
confirmacaoHandler.use(ctx => ctx.reply('Apenas confirme', botoesConfirmacao))



const wizardAgenda = new WizardScene('agenda', ctx => {
  
    ctx.wizard.next()
    
},
doaHandler,
dataHandler,
confirmacaoHandler
)


const stage = new Stage([wizardAgenda], {default: 'agenda'})
bot.use(session())
bot.use(stage.middleware())

bot.startPolling()
//location -23.186712, -45.881703
